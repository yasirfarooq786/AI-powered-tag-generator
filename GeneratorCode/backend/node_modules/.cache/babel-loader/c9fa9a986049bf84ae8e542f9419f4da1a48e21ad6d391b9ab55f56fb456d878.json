{"ast":null,"code":"var _jsxFileName = \"/Users/mobilelive-ml-lpt-0113/Desktop/AI Powered ALT Generator/FrontEnd/src/components/ImageList.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { generateAltTags } from '../services/crawlerService';\nimport LoadingSpinner from './LoadingSpinner';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ImageList = ({\n  images,\n  setImages,\n  isLoading,\n  setIsLoading\n}) => {\n  _s();\n  const [successMessage, setSuccessMessage] = useState('');\n  const handleGenerateAltTags = async () => {\n    if (images.length === 0) return;\n    setIsLoading(true);\n    setSuccessMessage('');\n    try {\n      const updatedImages = await generateAltTags(images);\n      setImages(updatedImages);\n      setSuccessMessage('ALT tags generated successfully!');\n    } catch (err) {\n      console.error('Error generating ALT tags:', err);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const handleAltChange = (index, newAlt) => {\n    const updatedImages = [...images];\n    updatedImages[index].alt = newAlt;\n    setImages(updatedImages);\n  };\n  if (images.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"empty-state\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Enter a website URL to extract images and generate ALT tags.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"image-list-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"image-list-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Found \", images.length, \" Images\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleGenerateAltTags,\n        disabled: isLoading,\n        children: isLoading ? /*#__PURE__*/_jsxDEV(LoadingSpinner, {\n          size: \"small\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 24\n        }, this) : 'Generate ALT Tags with AI'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), successMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"success-message\",\n      children: successMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 26\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"image-grid\",\n      children: images.map((img, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"image-card\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"image-preview\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: img.src,\n            alt: img.alt || 'No ALT text',\n            onError: e => e.target.style.display = 'none'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"image-details\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"image-url\",\n            children: img.src\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            value: img.alt || '',\n            onChange: e => handleAltChange(index, e.target.value),\n            placeholder: \"Enter ALT text...\",\n            rows: 3\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 15\n          }, this), img.generatedAlt && !img.alt && /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"use-generated-btn\",\n            onClick: () => handleAltChange(index, img.generatedAlt),\n            children: \"Use AI Suggestion\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n};\n_s(ImageList, \"+nDQmKElcA14+jS/hSZIW8YY5go=\");\n_c = ImageList;\nexport default ImageList;\nvar _c;\n$RefreshReg$(_c, \"ImageList\");","map":{"version":3,"names":["React","useState","generateAltTags","LoadingSpinner","jsxDEV","_jsxDEV","ImageList","images","setImages","isLoading","setIsLoading","_s","successMessage","setSuccessMessage","handleGenerateAltTags","length","updatedImages","err","console","error","handleAltChange","index","newAlt","alt","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","size","map","img","src","onError","e","target","style","display","value","onChange","placeholder","rows","generatedAlt","_c","$RefreshReg$"],"sources":["/Users/mobilelive-ml-lpt-0113/Desktop/AI Powered ALT Generator/FrontEnd/src/components/ImageList.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { generateAltTags } from '../services/crawlerService';\nimport LoadingSpinner from './LoadingSpinner';\n\nconst ImageList = ({ images, setImages, isLoading, setIsLoading }) => {\n  const [successMessage, setSuccessMessage] = useState('');\n\n  const handleGenerateAltTags = async () => {\n    if (images.length === 0) return;\n\n    setIsLoading(true);\n    setSuccessMessage('');\n\n    try {\n      const updatedImages = await generateAltTags(images);\n      setImages(updatedImages);\n      setSuccessMessage('ALT tags generated successfully!');\n    } catch (err) {\n      console.error('Error generating ALT tags:', err);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleAltChange = (index, newAlt) => {\n    const updatedImages = [...images];\n    updatedImages[index].alt = newAlt;\n    setImages(updatedImages);\n  };\n\n  if (images.length === 0) {\n    return (\n      <div className=\"empty-state\">\n        <p>Enter a website URL to extract images and generate ALT tags.</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"image-list-container\">\n      <div className=\"image-list-header\">\n        <h2>Found {images.length} Images</h2>\n        <button \n          onClick={handleGenerateAltTags} \n          disabled={isLoading}\n        >\n          {isLoading ? <LoadingSpinner size=\"small\" /> : 'Generate ALT Tags with AI'}\n        </button>\n      </div>\n\n      {successMessage && <div className=\"success-message\">{successMessage}</div>}\n\n      <div className=\"image-grid\">\n        {images.map((img, index) => (\n          <div key={index} className=\"image-card\">\n            <div className=\"image-preview\">\n              <img \n                src={img.src} \n                alt={img.alt || 'No ALT text'} \n                onError={(e) => e.target.style.display = 'none'}\n              />\n            </div>\n            <div className=\"image-details\">\n              <p className=\"image-url\">{img.src}</p>\n              <textarea\n                value={img.alt || ''}\n                onChange={(e) => handleAltChange(index, e.target.value)}\n                placeholder=\"Enter ALT text...\"\n                rows={3}\n              />\n              {img.generatedAlt && !img.alt && (\n                <button \n                  className=\"use-generated-btn\"\n                  onClick={() => handleAltChange(index, img.generatedAlt)}\n                >\n                  Use AI Suggestion\n                </button>\n              )}\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default ImageList;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,eAAe,QAAQ,4BAA4B;AAC5D,OAAOC,cAAc,MAAM,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9C,MAAMC,SAAS,GAAGA,CAAC;EAAEC,MAAM;EAAEC,SAAS;EAAEC,SAAS;EAAEC;AAAa,CAAC,KAAK;EAAAC,EAAA;EACpE,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAExD,MAAMa,qBAAqB,GAAG,MAAAA,CAAA,KAAY;IACxC,IAAIP,MAAM,CAACQ,MAAM,KAAK,CAAC,EAAE;IAEzBL,YAAY,CAAC,IAAI,CAAC;IAClBG,iBAAiB,CAAC,EAAE,CAAC;IAErB,IAAI;MACF,MAAMG,aAAa,GAAG,MAAMd,eAAe,CAACK,MAAM,CAAC;MACnDC,SAAS,CAACQ,aAAa,CAAC;MACxBH,iBAAiB,CAAC,kCAAkC,CAAC;IACvD,CAAC,CAAC,OAAOI,GAAG,EAAE;MACZC,OAAO,CAACC,KAAK,CAAC,4BAA4B,EAAEF,GAAG,CAAC;IAClD,CAAC,SAAS;MACRP,YAAY,CAAC,KAAK,CAAC;IACrB;EACF,CAAC;EAED,MAAMU,eAAe,GAAGA,CAACC,KAAK,EAAEC,MAAM,KAAK;IACzC,MAAMN,aAAa,GAAG,CAAC,GAAGT,MAAM,CAAC;IACjCS,aAAa,CAACK,KAAK,CAAC,CAACE,GAAG,GAAGD,MAAM;IACjCd,SAAS,CAACQ,aAAa,CAAC;EAC1B,CAAC;EAED,IAAIT,MAAM,CAACQ,MAAM,KAAK,CAAC,EAAE;IACvB,oBACEV,OAAA;MAAKmB,SAAS,EAAC,aAAa;MAAAC,QAAA,eAC1BpB,OAAA;QAAAoB,QAAA,EAAG;MAA4D;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChE,CAAC;EAEV;EAEA,oBACExB,OAAA;IAAKmB,SAAS,EAAC,sBAAsB;IAAAC,QAAA,gBACnCpB,OAAA;MAAKmB,SAAS,EAAC,mBAAmB;MAAAC,QAAA,gBAChCpB,OAAA;QAAAoB,QAAA,GAAI,QAAM,EAAClB,MAAM,CAACQ,MAAM,EAAC,SAAO;MAAA;QAAAW,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACrCxB,OAAA;QACEyB,OAAO,EAAEhB,qBAAsB;QAC/BiB,QAAQ,EAAEtB,SAAU;QAAAgB,QAAA,EAEnBhB,SAAS,gBAAGJ,OAAA,CAACF,cAAc;UAAC6B,IAAI,EAAC;QAAO;UAAAN,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,GAAG;MAA2B;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACpE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC,EAELjB,cAAc,iBAAIP,OAAA;MAAKmB,SAAS,EAAC,iBAAiB;MAAAC,QAAA,EAAEb;IAAc;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eAE1ExB,OAAA;MAAKmB,SAAS,EAAC,YAAY;MAAAC,QAAA,EACxBlB,MAAM,CAAC0B,GAAG,CAAC,CAACC,GAAG,EAAEb,KAAK,kBACrBhB,OAAA;QAAiBmB,SAAS,EAAC,YAAY;QAAAC,QAAA,gBACrCpB,OAAA;UAAKmB,SAAS,EAAC,eAAe;UAAAC,QAAA,eAC5BpB,OAAA;YACE8B,GAAG,EAAED,GAAG,CAACC,GAAI;YACbZ,GAAG,EAAEW,GAAG,CAACX,GAAG,IAAI,aAAc;YAC9Ba,OAAO,EAAGC,CAAC,IAAKA,CAAC,CAACC,MAAM,CAACC,KAAK,CAACC,OAAO,GAAG;UAAO;YAAAd,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACjD;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACC,CAAC,eACNxB,OAAA;UAAKmB,SAAS,EAAC,eAAe;UAAAC,QAAA,gBAC5BpB,OAAA;YAAGmB,SAAS,EAAC,WAAW;YAAAC,QAAA,EAAES,GAAG,CAACC;UAAG;YAAAT,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACtCxB,OAAA;YACEoC,KAAK,EAAEP,GAAG,CAACX,GAAG,IAAI,EAAG;YACrBmB,QAAQ,EAAGL,CAAC,IAAKjB,eAAe,CAACC,KAAK,EAAEgB,CAAC,CAACC,MAAM,CAACG,KAAK,CAAE;YACxDE,WAAW,EAAC,mBAAmB;YAC/BC,IAAI,EAAE;UAAE;YAAAlB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACT,CAAC,EACDK,GAAG,CAACW,YAAY,IAAI,CAACX,GAAG,CAACX,GAAG,iBAC3BlB,OAAA;YACEmB,SAAS,EAAC,mBAAmB;YAC7BM,OAAO,EAAEA,CAAA,KAAMV,eAAe,CAACC,KAAK,EAAEa,GAAG,CAACW,YAAY,CAAE;YAAApB,QAAA,EACzD;UAED;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CACT;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACE,CAAC;MAAA,GAxBER,KAAK;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAyBV,CACN;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAAClB,EAAA,CAhFIL,SAAS;AAAAwC,EAAA,GAATxC,SAAS;AAkFf,eAAeA,SAAS;AAAC,IAAAwC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}